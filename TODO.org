- icc: jobntasks? ~universe_size in MPI?
- icc: remove flexhandle, add a proper free function to register
- icc: get ntasks and nnodes from RM instead of env
- icc: cleanup logic of registration (register_(flex)mpi?)
- icc: cleanup context struct, keep icrm_stuff in, put flex stuff in?
- icc: margo_register_data-ed struct needs to be made thread-safe??
- icc: clid -> jobid.jobstepid?
- icc:resallocdone: no way to get the status code of the alloc ULT
- flexmpi: simplify func handling, private sock + func enough
- server: prefix LOG_ERROR with jobid/clid?
- server: create pool of icrm context
- server: set hostlist
- icdb: handle clients as a struct, commit func?
- icdb: status in context redundant?
- icdb: return icdberr_t from funcs + ERRSTR_LEN + context type _t
- icdb: with icrm, factorize WRITERR func & macro
- icdb: generally error string in context, yay or nay?
- icrm: remove socket stuff
- icrm: make request in client instead of server?
- jobcleaner: pool of icrm context
- spawn: wait for finalize? how?
- spawn: use hostlist

/* TODO
 * hg_error_to_string everywhere
 * Margo logging inside lib?
 * icc_status RPC (~test?)
 * Return struct or rc only?
 * XX malloc intempestif,
 * Cleanup error/info messages
 * margo_free_input in callback!
 * icc_init error code errno vs ICC? cleanup all
 * unecessary include directory?
 * ICC_TYPE_LEN check
 * RPC_CODE to string for logs (rpc.c)
 * server: unified ic context grouping db + rpcs + rm?
 * server: log jobid.jobstepid in callbacks
 * icc: send timestamp in register RPC
 * icc: compute ntasks from SLURM_TASKS_PER_NODE?
 * handle crashing application (via Slurm?)
 * malleability: return from ULT, get retcode + finalize icc_server?
 * malleability: filter on FlexMPI/iMPI, separate
 * malleability: duplication in arg struct
 * malleability: RPC for "reconfig acceptance/exec" on MPI side?
*/

